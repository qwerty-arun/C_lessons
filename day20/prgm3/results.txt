OUTPUT OF THE PROGRAM: 
sizeof(char) = 1
sizeof(short int) = 2
sizeof(int) = 4
sizeof(double) = 8
sizeof(structa_t) = 4
sizeof(structb_t) = 8
sizeof(structc_t) = 24
sizeof(structd_t) = 16

EXPLANATION: 

Calculating the size of each structure by directly adding the size of all the members, we get:

Size of Structure A = Size of (char + short int) = 1 + 2 = 3
Size of Structure B = Size of (short int + char + int) = 2 + 1 + 4 = 7
Size of Structure C = Size of (char + double + int) = 1 + 8 + 4 = 13
Size of Structure A = Size of (double + int + char) = 8 + 4 + 1= 13

BUT THE OUTPUT IS DIFFERENT, WHY?
REASON: This is because of the alignment requirements of various data types, every member of the structure should be naturally aligned. The members of the structure are allocated sequentially in increasing order. 

Structure A: 
sizeof(char) + 1 (padding) + sizeof(short), 1 + 1 + 2 = 4 bytes

Structure B:
2 + 1 + 1 (padding) + 4 = 8 bytes

Structure C:
Every structure will also have alignment requirements
Applying same analysis, structc_t needs sizeof(char) + 7-byte padding + sizeof(double) + sizeof(int) = 1 + 7 + 8 + 4 = 20 bytes. 
However, the sizeof(structc_t) is 24 bytes. It is because, along with structure members, structure type variables will also have natural alignment.

Structure D: 
sizeof(double) + sizeof(int) + sizeof(char) + padding(3) = 8 + 4 + 1 + 3 = 16 bytes
